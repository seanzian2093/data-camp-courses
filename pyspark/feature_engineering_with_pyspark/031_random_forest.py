from utils import spark
import re
from pyspark.ml.feature import StringIndexer
from pyspark.ml import Pipeline

obs_threshold = 30
binary_cols = [
    # "FENCE_WIRE",
    "FENCE_ELECTRIC",
    "FENCE_NAN",
    "FENCE_PARTIAL",
    "FENCE_RAIL",
    "FENCE_OTHER",
    "FENCE_CHAIN LINK",
    "FENCE_FULL",
    "FENCE_NONE",
    "FENCE_PRIVACY",
    "FENCE_WOOD",
    "FENCE_INVISIBLE",
    "ROOF_ASPHALT SHINGLES",
    "ROOF_SHAKES",
    "ROOF_NAN",
    "ROOF_UNSPECIFIED SHINGLE",
    "ROOF_SLATE",
    "ROOF_PITCHED",
    "ROOF_FLAT",
    "ROOF_TAR/GRAVEL",
    "ROOF_OTHER",
    "ROOF_METAL",
    "ROOF_TILE",
    "ROOF_RUBBER",
    "ROOF_WOOD SHINGLES",
    "ROOF_AGE OVER 8 YEARS",
    "ROOF_AGE 8 YEARS OR LESS",
    "POOLDESCRIPTION_NAN",
    "POOLDESCRIPTION_HEATED",
    "POOLDESCRIPTION_NONE",
    "POOLDESCRIPTION_SHARED",
    "POOLDESCRIPTION_INDOOR",
    "POOLDESCRIPTION_OUTDOOR",
    "POOLDESCRIPTION_ABOVE GROUND",
    "POOLDESCRIPTION_BELOW GROUND",
    "GARAGEDESCRIPTION_ASSIGNED",
    "GARAGEDESCRIPTION_TANDEM",
    "GARAGEDESCRIPTION_UNCOVERED/OPEN",
    "GARAGEDESCRIPTION_TUCKUNDER",
    "GARAGEDESCRIPTION_DRIVEWAY - ASPHALT",
    "GARAGEDESCRIPTION_HEATED GARAGE",
    "GARAGEDESCRIPTION_UNDERGROUND GARAGE",
    "GARAGEDESCRIPTION_DRIVEWAY - SHARED",
    "GARAGEDESCRIPTION_CONTRACT PKG REQUIRED",
    "GARAGEDESCRIPTION_GARAGE DOOR OPENER",
    "GARAGEDESCRIPTION_MORE PARKING OFFSITE FOR FEE",
    "GARAGEDESCRIPTION_VALET PARKING FOR FEE",
    "GARAGEDESCRIPTION_OTHER",
    "GARAGEDESCRIPTION_MORE PARKING ONSITE FOR FEE",
    "GARAGEDESCRIPTION_DRIVEWAY - OTHER SURFACE",
    "GARAGEDESCRIPTION_DETACHED GARAGE",
    "GARAGEDESCRIPTION_SECURED",
    "GARAGEDESCRIPTION_CARPORT",
    "GARAGEDESCRIPTION_DRIVEWAY - CONCRETE",
    "GARAGEDESCRIPTION_ON-STREET PARKING ONLY",
    "GARAGEDESCRIPTION_COVERED",
    "GARAGEDESCRIPTION_INSULATED GARAGE",
    "GARAGEDESCRIPTION_UNASSIGNED",
    "GARAGEDESCRIPTION_NONE",
    "GARAGEDESCRIPTION_DRIVEWAY - GRAVEL",
    "GARAGEDESCRIPTION_NO INT ACCESS TO DWELLING",
    "GARAGEDESCRIPTION_UNITS VARY",
    "GARAGEDESCRIPTION_ATTACHED GARAGE",
    "APPLIANCES_NAN",
    "APPLIANCES_COOKTOP",
    "APPLIANCES_WALL OVEN",
    "APPLIANCES_WATER SOFTENER - OWNED",
    "APPLIANCES_DISPOSAL",
    "APPLIANCES_DISHWASHER",
    "APPLIANCES_OTHER",
    "APPLIANCES_INDOOR GRILL",
    "APPLIANCES_WASHER",
    "APPLIANCES_RANGE",
    "APPLIANCES_REFRIGERATOR",
    "APPLIANCES_FURNACE HUMIDIFIER",
    "APPLIANCES_TANKLESS WATER  HEATER",
    "APPLIANCES_ELECTRONIC AIR FILTER",
    "APPLIANCES_MICROWAVE",
    "APPLIANCES_EXHAUST FAN/HOOD",
    "APPLIANCES_NONE",
    "APPLIANCES_CENTRAL VACUUM",
    "APPLIANCES_TRASH COMPACTOR",
    "APPLIANCES_AIR-TO-AIR EXCHANGER",
    "APPLIANCES_DRYER",
    "APPLIANCES_FREEZER",
    "APPLIANCES_WATER SOFTENER - RENTED",
    "EXTERIOR_SHAKES",
    "EXTERIOR_CEMENT BOARD",
    "EXTERIOR_BLOCK",
    "EXTERIOR_VINYL",
    "EXTERIOR_FIBER BOARD",
    "EXTERIOR_OTHER",
    "EXTERIOR_METAL",
    "EXTERIOR_BRICK/STONE",
    "EXTERIOR_STUCCO",
    "EXTERIOR_ENGINEERED WOOD",
    "EXTERIOR_WOOD",
    "DININGROOMDESCRIPTION_EAT IN KITCHEN",
    "DININGROOMDESCRIPTION_NAN",
    "DININGROOMDESCRIPTION_OTHER",
    "DININGROOMDESCRIPTION_LIVING/DINING ROOM",
    "DININGROOMDESCRIPTION_SEPARATE/FORMAL DINING ROOM",
    "DININGROOMDESCRIPTION_KITCHEN/DINING ROOM",
    "DININGROOMDESCRIPTION_INFORMAL DINING ROOM",
    "DININGROOMDESCRIPTION_BREAKFAST AREA",
    "BASEMENT_FINISHED (LIVABLE)",
    "BASEMENT_PARTIAL",
    "BASEMENT_SUMP PUMP",
    "BASEMENT_INSULATING CONCRETE FORMS",
    "BASEMENT_CRAWL SPACE",
    "BASEMENT_PARTIAL FINISHED",
    "BASEMENT_CONCRETE BLOCK",
    "BASEMENT_DRAINAGE SYSTEM",
    "BASEMENT_POURED CONCRETE",
    "BASEMENT_UNFINISHED",
    "BASEMENT_DRAIN TILED",
    "BASEMENT_WOOD",
    "BASEMENT_FULL",
    "BASEMENT_EGRESS WINDOWS",
    "BASEMENT_DAY/LOOKOUT WINDOWS",
    "BASEMENT_SLAB",
    "BASEMENT_STONE",
    "BASEMENT_NONE",
    "BASEMENT_WALKOUT",
    "BATHDESC_MAIN FLOOR 1/2 BATH",
    "BATHDESC_TWO MASTER BATHS",
    "BATHDESC_MASTER WALK-THRU",
    "BATHDESC_WHIRLPOOL",
    "BATHDESC_NAN",
    "BATHDESC_3/4 BASEMENT",
    "BATHDESC_TWO BASEMENT BATHS",
    "BATHDESC_OTHER",
    "BATHDESC_3/4 MASTER",
    "BATHDESC_MAIN FLOOR 3/4 BATH",
    "BATHDESC_FULL MASTER",
    "BATHDESC_MAIN FLOOR FULL BATH",
    "BATHDESC_WALK-IN SHOWER",
    "BATHDESC_SEPARATE TUB & SHOWER",
    "BATHDESC_FULL BASEMENT",
    "BATHDESC_BASEMENT",
    "BATHDESC_WALK THRU",
    "BATHDESC_BATHROOM ENSUITE",
    "BATHDESC_PRIVATE MASTER",
    "BATHDESC_JACK & JILL 3/4",
    "BATHDESC_UPPER LEVEL 1/2 BATH",
    "BATHDESC_ROUGH IN",
    "BATHDESC_UPPER LEVEL FULL BATH",
    "BATHDESC_1/2 MASTER",
    "BATHDESC_1/2 BASEMENT",
    "BATHDESC_JACK AND JILL",
    "BATHDESC_UPPER LEVEL 3/4 BATH",
    "ZONING_INDUSTRIAL",
    "ZONING_BUSINESS/COMMERCIAL",
    "ZONING_OTHER",
    "ZONING_RESIDENTIAL-SINGLE",
    "ZONING_RESIDENTIAL-MULTI-FAMILY",
    "COOLINGDESCRIPTION_WINDOW",
    "COOLINGDESCRIPTION_WALL",
    "COOLINGDESCRIPTION_DUCTLESS MINI-SPLIT",
    "COOLINGDESCRIPTION_NONE",
    "COOLINGDESCRIPTION_GEOTHERMAL",
    "COOLINGDESCRIPTION_CENTRAL",
    "CITY:LELM - LAKE ELMO",
    "CITY:MAPW - MAPLEWOOD",
    "CITY:OAKD - OAKDALE",
    "CITY:STP - SAINT PAUL",
    "CITY:WB - WOODBURY",
    "LISTTYPE:EXCLUSIVE AGENCY",
    "LISTTYPE:EXCLUSIVE RIGHT",
    "LISTTYPE:EXCLUSIVE RIGHT WITH EXCLUSIONS",
    "LISTTYPE:OTHER",
    "LISTTYPE:SERVICE AGREEMENT",
    "SCHOOLDISTRICTNUMBER:6 - SOUTH ST. PAUL",
    "SCHOOLDISTRICTNUMBER:622 - NORTH ST PAUL-MAPLEWOOD",
    "SCHOOLDISTRICTNUMBER:623 - ROSEVILLE",
    "SCHOOLDISTRICTNUMBER:624 - WHITE BEAR LAKE",
    "SCHOOLDISTRICTNUMBER:625 - ST. PAUL",
    "SCHOOLDISTRICTNUMBER:832 - MAHTOMEDI",
    "SCHOOLDISTRICTNUMBER:833 - SOUTH WASHINGTON COUNTY",
    "SCHOOLDISTRICTNUMBER:834 - STILLWATER",
    "POTENTIALSHORTSALE:NO",
    "POTENTIALSHORTSALE:NOT DISCLOSED",
    "STYLE:(CC) CONVERTED MANSION",
    "STYLE:(CC) HIGH RISE (4+ LEVELS)",
    "STYLE:(CC) LOW RISE (3- LEVELS)",
    "STYLE:(CC) MANOR/VILLAGE",
    "STYLE:(CC) TWO UNIT",
    "STYLE:(SF) FOUR OR MORE LEVEL SPLIT",
    "STYLE:(SF) MODIFIED TWO STORY",
    "STYLE:(SF) MORE THAN TWO STORIES",
    "STYLE:(SF) ONE 1/2 STORIES",
    "STYLE:(SF) ONE STORY",
    "STYLE:(SF) OTHER",
    "STYLE:(SF) SPLIT ENTRY (BI-LEVEL)",
    "STYLE:(SF) THREE LEVEL SPLIT",
    "STYLE:(SF) TWO STORIES",
    "STYLE:(TH) DETACHED",
    "STYLE:(TH) QUAD/4 CORNERS",
    "STYLE:(TH) SIDE X SIDE",
    "STYLE:(TW) TWIN HOME",
    "ASSUMABLEMORTGAGE:INFORMATION COMING",
    "ASSUMABLEMORTGAGE:NOT ASSUMABLE",
    "ASSUMABLEMORTGAGE:YES W/ QUALIFYING",
    "ASSUMABLEMORTGAGE:YES W/NO QUALIFYING",
    "ASSESSMENTPENDING:NO",
    "ASSESSMENTPENDING:UNKNOWN",
    "ASSESSMENTPENDING:YES",
]

# A shorter list for demo
binary_cols = [
    "GARAGEDESCRIPTION_ASSIGNED",
    "GARAGEDESCRIPTION_TANDEM",
    "GARAGEDESCRIPTION_UNCOVERED/OPEN",
    "GARAGEDESCRIPTION_TUCKUNDER",
    "GARAGEDESCRIPTION_DRIVEWAY-ASPHALT",
    "GARAGEDESCRIPTION_HEATEDGARAGE",
    "GARAGEDESCRIPTION_UNDERGROUNDGARAGE",
    "GARAGEDESCRIPTION_DRIVEWAY-SHARED",
    "GARAGEDESCRIPTION_CONTRACTPKGREQUIRED",
    "GARAGEDESCRIPTION_GARAGEDOOROPENER",
]

df = spark.read.csv("data/df_random_forest.txt", header=True, inferSchema=True, sep="|")
# Get columns matching pattern
cols_to_drop = [col for col in df.columns if re.match(r"^_c", col)]

# Drop those columns
df = df.drop(*cols_to_drop)
# df.show(3)
# print(df.dtypes)

cols_to_remove = list()
# Inspect first 10 binary columns in list
for col in binary_cols[0:10]:
    # Count the number of 1 values in the binary column
    print(col)
    obs_count = df.agg({col: "sum"}).collect()[0][0]
    # obs_count = 0
    # If less than our observation threshold, remove
    if obs_count < obs_threshold:
        cols_to_remove.append(col)

# Drop columns and print starting and ending dataframe shapes
new_df = df.drop(*cols_to_remove)

print("Rows: " + str(df.count()) + " Columns: " + str(len(df.columns)))
print("Rows: " + str(new_df.count()) + " Columns: " + str(len(new_df.columns)))

# Read the file into a dataframe
df = spark.read.csv(
    "data/2017_StPaul_MN_Real_Estate.csv", header=True, inferSchema=True
)
categorical_cols = [
    # "CITY",
    "LISTTYPE",
    "SCHOOLDISTRICTNUMBER",
    "POTENTIALSHORTSALE",
    "STYLE",
    "ASSUMABLEMORTGAGE",
    "ASSESSMENTPENDING",
]

# Replace missing values- now we don't have those two columns
# df = df.fillna(-1, subset=["WALKSCORE", "BIKESCORE"])

# Create list of StringIndexers using list comprehension
indexers = [
    StringIndexer(inputCol=col, outputCol=col + "_IDX").setHandleInvalid("keep")
    for col in categorical_cols
]
# Create pipeline of indexers
indexer_pipeline = Pipeline(stages=indexers)
# Fit and Transform the pipeline to the original data
df_indexed = indexer_pipeline.fit(df).transform(df)

# Clean up redundant columns
df_indexed = df_indexed.drop(*categorical_cols)
# Inspect data transformations
print(df_indexed.dtypes)
